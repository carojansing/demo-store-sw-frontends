import { AxiosInstance, AxiosResponse } from 'axios';
import { ShopwareSearchParams, EntityResult, Category, Product, ProductListingResult, ProductResponse, ProductReview, CustomerRegistrationParams, Customer, ContextTokenResponse, CustomerAddress, Order, SessionContext, Currency, Language, Country, Salutation, PaymentMethod, ShippingMethod, Cart, LineItem, StoreNavigationType, StoreNavigationElement, CmsPageResponse, LandingPage, SeoUrl, CreateOrderParams, OrderState, CustomerWishlistResponse, SitemapResult } from '@shopware-pwa/types';

/**
 * @public
 */
type ClientSettings = {
    /**
     * shopware URL
     */
    endpoint?: string;
    /**
     * id specific for each sales channel
     */
    accessToken?: string;
    /**
     * session id (dynamic)
     */
    contextToken?: string;
    /**
     * default amount of products shown on listings
     */
    defaultPaginationLimit?: number;
    /**
     * timeout limit (ms)
     */
    timeout?: number;
    /**
     * id of current language
     */
    languageId?: string;
};

/**
 * @public
 */
interface ConfigChangedArgs {
    config: ClientSettings;
}
/**
 * @public
 */
interface ShopwareApiInstance {
    onConfigChange: (fn: (context: ConfigChangedArgs) => void) => void;
    config: ClientSettings;
    setup: (config?: ClientSettings) => void;
    update: (config?: ClientSettings) => void;
    invoke: {
        post: AxiosInstance["post"];
        get: AxiosInstance["get"];
        put: AxiosInstance["put"];
        patch: AxiosInstance["patch"];
        delete: AxiosInstance["delete"];
    };
    defaults: AxiosInstance["defaults"];
    /**
     * We expose axios instance for advanced use. You might cause some side effects, use with caution.
     */
    _axiosInstance: AxiosInstance;
}
/**
 *
 * @public
 */
declare function createInstance(initialConfig?: ClientSettings): ShopwareApiInstance;

/**
 * Get a list of categories by provided search criteria.
 *
 * @param {ShopwareSearchParams} search criteria search criteria for categories
 * @param {ShopwareApiInstance} contextInstance instance of the api client (by default it's an Axios instance)
 *
 * @throws ClientApiError
 * @category Category
 * @public
 */
declare function getCategories(searchCriteria?: ShopwareSearchParams, contextInstance?: ShopwareApiInstance): Promise<EntityResult<"category", Category>>;
/**
 * Get a single category by its id.
 *
 * @param {string} categoryId id of the category
 * @param {ShopwareApiInstance} contextInstance instance of the api client (by default it's an Axios instance)
 *
 * @throws ClientApiError
 * @category Category
 * @public
 */
declare function getCategory(categoryId: string, contextInstance?: ShopwareApiInstance): Promise<Category>;

/**
 * Get default amount of products
 *
 * @param {ShopwareSearchParams} criteria search criteria for products
 * @param {ShopwareApiInstance} contextInstance instance of the api client (by default it's an Axios instance)
 *
 * @throws ClientApiError
 * @category Product
 * @public
 */
declare function getProducts(criteria?: ShopwareSearchParams, contextInstance?: ShopwareApiInstance): Promise<EntityResult<"product", Product>>;
/**
 * Get default amount of products and listing configuration for given category
 *
 * @throws ClientApiError
 * @category Product
 * @public
 */
declare function getCategoryProducts(categoryId: string, criteria?: ShopwareSearchParams, contextInstance?: ShopwareApiInstance): Promise<ProductListingResult>;
/**
 * Get the product with passed productId
 *
 * @throws ClientApiError
 * @category Product
 * @public
 */
declare function getProduct(productId: string, params?: unknown, contextInstance?: ShopwareApiInstance): Promise<ProductResponse>;
/**
 * Add a review to specific product by its ID
 *
 * @throws ClientApiError
 * @category Product
 * @public
 */
declare function addProductReview(productId: string, productReviewData: {
    title: string;
    content: string;
    points: number;
}, contextInstance?: ShopwareApiInstance): Promise<void>;
/**
 * Get product reviews
 *
 * @throws ClientApiError
 * @category Product
 * @public
 */
declare function getProductReviews(productId: string, criteria?: ShopwareSearchParams, contextInstance?: ShopwareApiInstance): Promise<EntityResult<"product_review", ProductReview>>;
/**
 * Get matching product variant for given options
 *
 * @category Product
 */
declare function getProductVariantForOptions({ productId, optionIds, switchedGroup, }: {
    productId?: string;
    optionIds?: string[];
    switchedGroup?: string;
}, contextInstance?: ShopwareApiInstance): Promise<{
    variantId: string;
    options: string[];
}>;

/**
 * @category Customer
 * @public
 */
interface CustomerRegisterResponse {
    data: string;
}
/**
 * Register a customer
 *
 * @param params CustomerRegistrationParams
 * @param contextInstance ShopwareApiInstance
 *
 * @throws ClientApiError
 * @category Customer
 * @public
 */
declare function register(params: CustomerRegistrationParams, contextInstance?: ShopwareApiInstance): Promise<Customer>;
/**
 * Login user to shopware instance.
 *
 * @param {object} parameters username and password
 * @param contextInstance ShopwareApiInstance
 *
 * @throws ClientApiError
 * @category Customer
 * @public
 */
declare function login(parameters?: {
    username?: string;
    password?: string;
}, contextInstance?: ShopwareApiInstance): Promise<ContextTokenResponse>;
/**
 * End up the user session.
 *
 * @param contextInstance ShopwareApiInstance
 *
 * @throws ClientApiError
 * @category Customer
 * @public
 */
declare function logout(contextInstance?: ShopwareApiInstance): Promise<void>;
/**
 * Get customer's object
 *
 * @param parameters ShopwareSearchParams
 *
 * @throws ClientApiError
 * @category Customer
 * @public
 */
declare function getCustomer(parameters?: ShopwareSearchParams, contextInstance?: ShopwareApiInstance): Promise<Customer | null>;
/**
 * Get all customer's addresses
 *
 * @param parameters ShopwareSearchParams
 * @param contextInstance ShopwareApiInstance
 *
 * @throws ClientApiError
 * @category Customer
 * @public
 */
declare function getCustomerAddresses(parameters?: ShopwareSearchParams, contextInstance?: ShopwareApiInstance): Promise<EntityResult<"customer_address", CustomerAddress>>;
/**
 * Get all customer's orders
 *
 * @param parameters ShopwareSearchParams
 * @param contextInstance ShopwareApiInstance
 *
 * @throws ClientApiError
 * @category Customer
 * @public
 */
declare function getCustomerOrders(parameters?: ShopwareSearchParams, contextInstance?: ShopwareApiInstance): Promise<EntityResult<"order", Order>>;
/**
 * Get the customer's address by id
 *
 * @param {string} addressId ID of the address
 * @param contextInstance ShopwareApiInstance
 *
 * @throws ClientApiError
 * @category Customer
 * @public
 */
declare function getCustomerAddress(addressId: string, contextInstance?: ShopwareApiInstance): Promise<CustomerAddress>;
/**
 * Create an address and respond the new address's id
 *
 * @param {Partial<CustomerAddress>} params address data
 * @param contextInstance ShopwareApiInstance
 *
 * @throws ClientApiError
 * @category Customer
 * @public
 */
declare function createCustomerAddress(params: Partial<CustomerAddress>, contextInstance?: ShopwareApiInstance): Promise<CustomerAddress>;
/**
 * Update an address for specific ID
 *
 * @param {Partial<CustomerAddress>} params address data
 * @param contextInstance ShopwareApiInstance
 *
 * @throws ClientApiError
 * @category Customer
 * @public
 */
declare function updateCustomerAddress(params: Partial<CustomerAddress>, contextInstance?: ShopwareApiInstance): Promise<CustomerAddress>;
/**
 * Delete's the customer's address by id
 *
 * @param {string} addressId ID of the address
 * @param contextInstance ShopwareApiInstance
 *
 * @throws ClientApiError
 * @category Customer
 * @public
 */
declare function deleteCustomerAddress(addressId: string, contextInstance?: ShopwareApiInstance): Promise<void>;
/**
 * Set address as default
 *
 * @param {string} addressId ID of the address
 * @param contextInstance ShopwareApiInstance
 *
 * @throws ClientApiError
 * @category Customer
 * @public
 */
declare function setDefaultCustomerBillingAddress(addressId: string, contextInstance?: ShopwareApiInstance): Promise<string>;
/**
 * Set address as default
 *
 * @param {string} addressId ID of the address
 * @param contextInstance ShopwareApiInstance
 *
 * @throws ClientApiError
 * @category Customer
 * @public
 */
declare function setDefaultCustomerShippingAddress(addressId: string, contextInstance?: ShopwareApiInstance): Promise<string>;
/**
 * @category Customer
 * @public
 */
interface CustomerUpdateEmailParam {
    email: string;
    emailConfirmation: string;
    password: string;
}
/**
 * Update a customer's email
 *
 * @param params CustomerUpdateEmailParam email data
 * @param contextInstance ShopwareApiInstance
 *
 * @throws ClientApiError
 * @category Customer
 * @public
 */
declare function updateEmail(params: CustomerUpdateEmailParam, contextInstance?: ShopwareApiInstance): Promise<void>;
/**
 * @category Customer
 * @public
 */
interface CustomerUpdatePasswordParam {
    password: string;
    newPassword: string;
    newPasswordConfirm: string;
}
/**
 * Update a customer's password
 *
 * @param params CustomerUpdatePasswordParam password data
 * @param contextInstance ShopwareApiInstance
 *
 * @throws ClientApiError
 * @category Customer
 * @public
 */
declare function updatePassword(params: CustomerUpdatePasswordParam, contextInstance?: ShopwareApiInstance): Promise<void>;
/**
 * @category Customer
 * @public
 */
interface CustomerResetPasswordParam {
    email: string;
    storefrontUrl?: string;
}
/**
 * Reset a customer's password
 *
 * @param params CustomerResetPasswordParam password data
 * @param contextInstance ShopwareApiInstance
 *
 * @throws ClientApiError
 * @category Customer
 * @public
 */
declare function resetPassword(params: CustomerResetPasswordParam, contextInstance?: ShopwareApiInstance): Promise<void>;
/**
 * Confirm a customer's password reset. Set new password for account.
 *
 * @param {object} params new password and hash
 *
 * @throws ClientApiError
 * @category Customer
 * @public
 */
declare function confirmPasswordReset(params: {
    newPassword: string;
    hash: string;
    [key: string]: unknown;
}, contextInstance?: ShopwareApiInstance): Promise<void>;
/**
 * @category Customer
 * @public
 */
interface CustomerUpdateProfileParam {
    firstName: string;
    lastName: string;
    salutationId: string;
    title: string | null;
}
/**
 * Update a customer's profile data
 *
 * @param {object} params profile data
 * @param contextInstance ShopwareApiInstance
 *
 * @throws ClientApiError
 * @category Customer
 * @public
 */
declare function updateProfile(params: CustomerUpdateProfileParam, contextInstance?: ShopwareApiInstance): Promise<void>;
/**
 * Confirm an account registration in double opt-in mode
 *
 * @param params hash and em tokens
 * @param contextInstance ShopwareApiInstance
 *
 * @throws ClientApiError
 * @category Customer
 * @public
 */
declare function confirmAccountRegistration(params: {
    hash: string;
    em: string;
}, contextInstance?: ShopwareApiInstance): Promise<Customer>;
/**
 * Set payment method under provided ID as default
 *
 * @param {string} paymentMethodId ID of the payment method
 * @param contextInstance ShopwareApiInstance
 *
 * @throws ClientApiError
 * @category Customer
 * @public
 */
declare function setDefaultCustomerPaymentMethod(paymentMethodId: string, contextInstance?: ShopwareApiInstance): Promise<{
    success: boolean;
}>;
/**
 * Checking if user is newsletter subscriber
 *
 * @param contextInstance ShopwareApiInstance
 *
 * @throws ClientApiError
 * @category Customer
 * @public
 */
declare function isNewsletterSubscriber(contextInstance?: ShopwareApiInstance): Promise<{
    status: string;
    apiAlias: string;
}>;

/**
 * Loads session context, containing all session-related data.
 *
 * @param {ShopwareApiInstance} contextInstance instance of the api client (by default it's an Axios instance)
 *
 * @throws ClientApiErrosr
 * @category Context
 * @public
 */
declare function getSessionContext(contextInstance?: ShopwareApiInstance): Promise<SessionContext>;
/**
 * Set the current session's shipping address to correspoding to id
 *
 * @param {string} shippingAddressId id of the shipping address
 * @param {ShopwareApiInstance} contextInstance instance of the api client (by default it's an Axios instance)
 *
 * @throws ClientApiError
 * @category Context
 * @public
 */
declare function setCurrentShippingAddress(shippingAddressId: string, contextInstance?: ShopwareApiInstance): Promise<ContextTokenResponse>;
/**
 * Set the current session's billing address to correspoding to id
 *
 * @param {string} billingAddressId id of the billing address
 * @param {ShopwareApiInstance} contextInstance instance of the api client (by default it's an Axios instance)
 *
 * @throws ClientApiError
 * @category Context
 * @public
 */
declare function setCurrentBillingAddress(billingAddressId: string, contextInstance?: ShopwareApiInstance): Promise<ContextTokenResponse>;
/**
 * Get all available currencies
 *
 * @param {ShopwareApiInstance} contextInstance instance of the api client (by default it's an Axios instance)
 *
 * @throws ClientApiError
 * @category Context
 * @public
 */
declare function getAvailableCurrencies(contextInstance?: ShopwareApiInstance): Promise<Currency[]>;
/**
 * Set the current session's currency to correspoding to id
 *
 * @param {string} newCurrencyID id of the currency
 * @param {ShopwareApiInstance} contextInstance instance of the api client (by default it's an Axios instance)
 *
 * @throws ClientApiError
 * @category Context
 * @public
 */
declare function setCurrentCurrency(newCurrencyID: string, contextInstance?: ShopwareApiInstance): Promise<ContextTokenResponse>;
/**
 * Get all available languages
 *
 * @param {ShopwareApiInstance} contextInstance instance of the api client (by default it's an Axios instance)
 *
 * @throws ClientApiError
 * @category Context
 * @public
 */
declare function getAvailableLanguages(contextInstance?: ShopwareApiInstance): Promise<EntityResult<"language", Language>>;
/**
 * Set the current session's language to correspoding to id
 *
 * @param {string} newLanguageId id of the language
 * @param {ShopwareApiInstance} contextInstance instance of the api client (by default it's an Axios instance)
 *
 * @throws ClientApiError
 * @category Context
 * @public
 */
declare function setCurrentLanguage(newLanguageId: string, contextInstance?: ShopwareApiInstance): Promise<ContextTokenResponse>;
/**
 * Get all available countries
 *
 * @param {ShopwareApiInstance} contextInstance instance of the api client (by default it's an Axios instance)
 *
 * @throws ClientApiError
 * @category Context
 * @public
 */
declare function getAvailableCountries(contextInstance?: ShopwareApiInstance): Promise<EntityResult<"country", Country>>;
/**
 * Get all available salutations
 *
 * @param {ShopwareApiInstance} contextInstance instance of the api client (by default it's an Axios instance)
 *
 * @throws ClientApiError
 * @category Context
 * @public
 */
declare function getAvailableSalutations(contextInstance?: ShopwareApiInstance): Promise<EntityResult<"salutation", Salutation>>;
/**
 * get all available payment methods
 *
 * @param {ShopwareApiInstance} contextInstance instance of the api client (by default it's an Axios instance)
 * @param {object} params additional params
 *
 * @throws ClientApiError
 * @category Context
 * @public
 */
declare function getAvailablePaymentMethods(contextInstance?: ShopwareApiInstance, params?: {
    onlyAvailable?: boolean;
}): Promise<EntityResult<"payment_method", PaymentMethod>>;
/**
 * Get payment method details
 *
 * @param {string} paymentId id of the payment method
 * @param {ShopwareApiInstance} contextInstance instance of the api client (by default it's an Axios instance)
 *
 * @throws ClientApiError
 * @category Context
 * @public
 */
declare function getPaymentMethodDetails(paymentId: string, contextInstance?: ShopwareApiInstance): Promise<PaymentMethod>;
/**
 * Set the current session's payment method to correspoding to id
 *
 * @param {string} newPaymentMethodId id of the payment method
 * @param {ShopwareApiInstance} contextInstance instance of the api client (by default it's an Axios instance)
 *
 * @throws ClientApiError
 * @category Context
 * @public
 */
declare function setCurrentPaymentMethod(newPaymentMethodId: string, contextInstance?: ShopwareApiInstance): Promise<ContextTokenResponse>;
/**
 * Get all available shipping methods
 *
 * @param {ShopwareApiInstance} contextInstance instance of the api client (by default it's an Axios instance)
 * @param {object} params additional params
 *
 * @throws ClientApiError
 * @category Context
 * @public
 */
declare function getAvailableShippingMethods(contextInstance?: ShopwareApiInstance, params?: ShopwareSearchParams): Promise<EntityResult<"shipping_method", ShippingMethod>>;
/**
 * Get Shipping method details
 *
 * @param {string} shippingId id of the shipping method
 * @param {ShopwareApiInstance} contextInstance instance of the api client (by default it's an Axios instance)
 *
 * @throws ClientApiError
 * @category Context
 * @public
 */
declare function getShippingMethodDetails(shippingId: string, contextInstance?: ShopwareApiInstance): Promise<ShippingMethod>;
/**
 * Set the current session's shipping method to correspoding to id
 *
 * @param {string} newShippingMethodId id of the shipping method
 * @param {ShopwareApiInstance} contextInstance instance of the api client (by default it's an Axios instance)
 *
 * @throws ClientApiError
 * @category Context
 * @public
 */
declare function setCurrentShippingMethod(newShippingMethodId: string, contextInstance?: ShopwareApiInstance): Promise<ContextTokenResponse>;
/**
 * Get the current session's country
 *
 * @param {string} countryId id of the country
 * @param {ShopwareApiInstance} contextInstance instance of the api client (by default it's an Axios instance)
 *
 * @throws ClientApiError
 * @category Context
 * @public
 */
declare function getUserCountry(countryId: string, contextInstance?: ShopwareApiInstance): Promise<Country>;
/**
 * Get the current session's salutation
 *
 * @param {string} salutationId id of the salutation
 * @param {ShopwareApiInstance} contextInstance instance of the api client (by default it's an Axios instance)
 *
 * @throws ClientApiError
 * @category Context
 * @public
 */
declare function getUserSalutation(salutationId: string, contextInstance?: ShopwareApiInstance): Promise<Salutation>;

/**
 * When no sw-context-token given then this method return an empty cart with the new sw-context-token.
 *
 * When sw-context-token given then this method simply returns the current state of the cart.
 *
 * As the purpose of this method is not clear we recommend to use `getCart` method because its behaviour seems to be the same.
 *
 * @param {ShopwareApiInstance} contextInstance instance of the api client (by default it's an Axios instance)
 *
 * @throws ClientApiError
 *
 * @public
 *
 * @category Cart
 */
declare function clearCart(contextInstance?: ShopwareApiInstance): Promise<ContextTokenResponse>;
/**
 * Gets the current cart for the sw-context-token.
 * @throws ClientApiError
 * @public
 *
 * @category Cart
 */
declare function getCart(contextInstance?: ShopwareApiInstance): Promise<Cart>;
/**
 * Adds specific quantity of the product to the cart by productId. It creates a new cart line item.
 *
 * Warning: This method does not change the state of the cart in any way if productId already exists in a cart. For changing the quantity use addQuantityToCartLineItem() or changeCartLineItemQuantity() methods.
 *
 * @throws ClientApiError
 * @public
 *
 * @param {string} productId id of the cart line item (usually it's a product id)
 * @param {number} quantity quantity of the product to be added to the cart
 * @param {ShopwareApiInstance} contextInstance instance of the api client (by default it's an Axios instance)
 *
 * @category Cart
 */
declare function addProductToCart(productId: string, quantity?: number, contextInstance?: ShopwareApiInstance): Promise<Cart>;
/**
 * Changes the current quantity in specific cart line item to given quantity.
 *
 * Example: If current quantity is 3 and you pass 2 as quantity parameter, you will get a new cart's state with quantity 2.
 *
 * @param {string} itemId id of the cart line item
 * @param {number} newQuantity new quantity of the cart line item
 * @param {ShopwareApiInstance} contextInstance instance of the api client (by default it's an Axios instance)
 *
 * @throws ClientApiError
 * @public
 *
 * @category Cart
 */
declare function changeCartItemQuantity(itemId: string, newQuantity?: number, contextInstance?: ShopwareApiInstance): Promise<Cart>;
/**
 * Deletes the cart line item by id.
 *
 * This method may be used for deleting "product" type item lines as well as "promotion" type item lines.
 *
 * @param itemId - id of the cart line item
 * @param contextInstance - instance of the api client (by default it's an Axios instance)
 *
 * @throws ClientApiError
 * @category Cart
 * @public
 */
declare function removeCartItem(itemId: string, contextInstance?: ShopwareApiInstance): Promise<Cart>;
/**
 * Adds new promotion code to the cart by its code.
 *
 * Promotion code is being added as separate cart item line.
 *
 * @param promotionCode - code of the promotion
 * @param contextInstance - instance of the api client (by default it's an Axios instance)
 *
 * @throws ClientApiError
 * @category Cart
 * @public
 */
declare function addPromotionCode(promotionCode: string, contextInstance?: ShopwareApiInstance): Promise<Cart>;
/**
 * Adds multiple items to the cart.
 * Accepts every type of cart item.
 *
 * @param items - array of cart items
 * @param contextInstance - instance of the api client (by default it's an Axios instance)
 *
 * @throws ClientApiError
 * @category Cart
 * @public
 */
declare function addCartItems(items: Partial<LineItem>[], contextInstance?: ShopwareApiInstance): Promise<any>;

/**
 * More about the navigation parameters: https://docs.shopware.com/en/shopware-platform-dev-en/store-api-guide/navigation?category=shopware-platform-dev-en/store-api-guide
 * @category Navigation
 * @public
 */
interface GetStoreNavigationParams {
    requestActiveId: StoreNavigationType;
    requestRootId: StoreNavigationType;
    depth?: number;
    buildTree?: boolean;
    searchCriteria?: ShopwareSearchParams;
}
/**
 * Get a list of categories by provided search criteria.
 *
 * @param {GetStoreNavigationParams} params search criteria for categories
 * @param {ShopwareApiInstance} contextInstance instance of the api client (by default it's an Axios instance)
 *
 * @throws ClientApiError
 * @category Navigation
 * @public
 */
declare function getStoreNavigation({ requestActiveId, requestRootId, depth, buildTree, searchCriteria, }: GetStoreNavigationParams, contextInstance?: ShopwareApiInstance): Promise<StoreNavigationElement[]>;

/**
 * @throws ClientApiError
 * @category CMS
 * @public
 * @deprecated the method is becoming obsolete and will be removed in the future as the SwagShopwarePwa plugin won't be needed.
 */
declare function getCmsPage(path: string, criteria?: ShopwareSearchParams, contextInstance?: ShopwareApiInstance): Promise<CmsPageResponse>;
/**
 * Fetches a landing page entity
 *
 * @param {string} landingPageId id of the landing page
 * @param {ShopwareSearchParams} params search criteria for landing page
 * @param {ShopwareApiInstance} contextInstance instance of the api client (by default it's an Axios instance)
 *
 * @throws ClientApiError
 * @category CMS
 * @public
 */
declare function getLandingPage(landingPageId: string, params?: ShopwareSearchParams, contextInstance?: ShopwareApiInstance): Promise<LandingPage>;
/**
 * Returns an array of SEO URLs for given entity
 * Can be used for other languages as well by providing the languageId
 *
 * @param {string} entityId id of the entity
 * @param {string} languageId id of the language
 * @param {ShopwareApiInstance} contextInstance instance of the api client (by default it's an Axios instance)
 *
 * @category CMS
 * @public
 */
declare function getSeoUrls(entityId: string, languageId?: string, contextInstance?: ShopwareApiInstance): Promise<EntityResult<"seo_url", SeoUrl>>;
/**
 * Returns an array of SEO URLs for given entity
 *
 * @param {ShopwareSearchParams} params search criteria for SEO URL
 * @param {ShopwareApiInstance} contextInstance instance of the api client (by default it's an Axios instance)
 *
 * @category CMS
 * @public
 * @throws ClientApiError
 */
declare function getSeoUrl(params: ShopwareSearchParams, contextInstance?: ShopwareApiInstance): Promise<EntityResult<"seo_url", SeoUrl>>;

/**
 * Creates an order for logged in and guest users
 *
 * @param params CreateOrderParams
 * @param contextInstance ShopwareApiInstance
 *
 * @category Checkout
 * @public
 */
declare function createOrder(params?: CreateOrderParams, contextInstance?: ShopwareApiInstance): Promise<Order>;
/**
 * @param orderId Id of an order
 * @param finishUrl URL where the customer is redirected to after payment is done
 * @param errorUrl URL where the customer is redirected to after payment fails
 *
 * @category Checkout
 * @public
 */
declare function handlePayment(params: {
    orderId: string;
    finishUrl?: string;
    errorUrl?: string;
    paymentDetails?: unknown;
}, contextInstance?: ShopwareApiInstance): Promise<{
    redirectUrl: string | null;
    apiAlias: string;
}>;
/**
 * Get order details
 *
 * @param orderId Id of an order
 * @param params ShopwareSearchParams
 * @param contextInstance - ShopwareApiInstance
 *
 * @throws ClientApiError
 * @category Checkout
 * @public
 */
declare function getOrderDetails(orderId: string, params?: ShopwareSearchParams, contextInstance?: ShopwareApiInstance): Promise<Order | undefined>;
/**
 * Cancel an order
 *
 * @param orderId Id of an order
 * @param contextInstance - ShopwareApiInstance
 *
 * @throws ClientApiError
 * @category Checkout
 * @public
 */
declare function cancelOrder(orderId: string, contextInstance?: ShopwareApiInstance): Promise<OrderState>;
/**
 * Change payment method for given order
 *
 * @param orderId Id of an order
 *
 * @throws ClientApiError
 * @category Checkout
 * @public
 */
declare function changeOrderPaymentMethod(orderId: string, paymentMethodId: string, contextInstance?: ShopwareApiInstance): Promise<{
    apiAlias: string;
    success: boolean;
}>;

/**
 * Invoke custom POST request to shopware API. Mostly for plugins usage.
 * You can skip domain and pass only endpoint ex. `/api/my/endpoint`
 *
 * @param {string} address endpoint address
 * @param {unknown} payload payload to send
 * @param {ShopwareApiInstance} contextInstance instance of the api client (by default it's an Axios instance)
 *
 * @throws ClientApiError
 * @public
 */
declare function invokePost<T>({ address, payload, }: {
    address: string;
    payload?: unknown;
}, contextInstance?: ShopwareApiInstance): Promise<AxiosResponse<T>>;
/**
 * Invoke custom GET request to shopware API. Mostly for plugins usage.
 * You can skip domain and pass only endpoint ex. `/api/my/endpoint`
 *
 * @param {string} address endpoint address
 * @param {ShopwareApiInstance} contextInstance instance of the api client (by default it's an Axios instance)
 *
 * @throws ClientApiError
 * @public
 */
declare function invokeGet<T>({ address }: {
    address: string;
}, contextInstance?: ShopwareApiInstance): Promise<AxiosResponse<T>>;

/**
 * Search for products based on criteria.
 * From: Shopware 6.4
 *
 * @param {ShopwareSearchParams} criteria search criteria for products
 * @param {ShopwareApiInstance} contextInstance instance of the api client (by default it's an Axios instance)
 *
 * @category Search
 * @public
 */
declare function searchProducts(criteria?: ShopwareSearchParams, contextInstance?: ShopwareApiInstance): Promise<ProductListingResult>;
/**
 * Search for suggested products based on criteria.
 * From: Shopware 6.4
 *
 * @param {ShopwareSearchParams} criteria search criteria for products
 * @param {ShopwareApiInstance} contextInstance instance of the api client (by default it's an Axios instance)
 *
 * @category Search
 * @public
 */
declare function searchSuggestedProducts(criteria?: ShopwareSearchParams, contextInstance?: ShopwareApiInstance): Promise<ProductListingResult>;

/**
 * @category Forms
 * @public
 */
interface ContactFormData {
    salutationId: string;
    firstName: string;
    lastName: string;
    email: string;
    phone?: string;
    subject: string;
    comment: string;
    navigationId?: string;
}
/**
 * Sends contact form
 *
 * @param {ContactFormData} params contact form data
 * @param {ShopwareApiInstance} contextInstance instance of the api client (by default it's an Axios instance)
 *
 * @category Forms
 * @public
 */
declare function sendContactForm(params: ContactFormData, contextInstance?: ShopwareApiInstance): Promise<void>;
/**
 * @category Forms
 * @public
 */
interface NewsletterSubscribeData {
    email: string;
    salutationId?: string;
    firstName?: string;
    lastName?: string;
    street?: string;
    city?: string;
    zipCode?: string;
    option: "direct" | "subscribe" | "confirmSubscribe" | "unsubscribe";
    storefrontUrl: string;
}
/**
 * Subscribes to newsletter
 *
 * @param {NewsletterSubscribeData} params newsletter subscribe data
 * @param {ShopwareApiInstance} contextInstance instance of the api client (by default it's an Axios instance)
 *
 * @category Forms
 * @public
 */
declare function newsletterSubscribe(params: NewsletterSubscribeData, contextInstance?: ShopwareApiInstance): Promise<void>;
/**
 * Unsubscribe from newsletter
 *
 * @param {NewsletterSubscribeData} params newsletter subscribe data: email
 *
 * @category Forms
 * @public
 */
declare function newsletterUnsubscribe(params: {
    email: string;
}, contextInstance?: ShopwareApiInstance): Promise<void>;

/**
 * Add a product with a specific ID to the wishlist
 *
 * @param {string} productId ID of the product to add to the wishlist
 * @param {ShopwareApiInstance}contextInstance instance of the api client (by default it's an Axios instance)
 *
 * @remarks Only for logged-in users
 * @throws ClientApiError
 * @category Wishlist
 * @public
 */
declare function addWishlistProduct(productId: string, contextInstance?: ShopwareApiInstance): Promise<{
    apiAlias: string;
    success: boolean;
}>;
/**
 * Fetch a current Wishlist with added products
 *
 * @param {ShopwareSearchParams} criteria search criteria for products
 * @param {ShopwareApiInstance} contextInstance instance of the api client (by default it's an Axios instance)
 *
 * @remarks Only for logged-in users
 * @throws ClientApiError
 * @category Wishlist
 * @public
 */
declare function getWishlistProducts(criteria?: ShopwareSearchParams, contextInstance?: ShopwareApiInstance): Promise<CustomerWishlistResponse>;
/**
 * Delete a product with a specific ID from the wishlist
 *
 * @param {string} productId ID of the product to remove from the wishlist
 * @param {ShopwareApiInstance} contextInstance instance of the api client (by default it's an Axios instance)
 *
 * @remarks Only for logged-in users
 * @throws ClientApiError
 * @category Wishlist
 * @public
 */
declare function removeWishlistProduct(productId: string, contextInstance?: ShopwareApiInstance): Promise<{
    apiAlias: string;
    success: boolean;
}>;
/**
 * Merge the current Wishlist with a products with provided IDs
 *
 * @param {string[]} productIds IDs of the products to merge with the wishlist
 * @param {ShopwareApiInstance} contextInstance instance of the api client (by default it's an Axios instance)
 *
 * @remarks Only for logged-in users
 * @throws ClientApiError
 * @category Wishlist
 * @public
 */
declare function mergeWishlistProducts(productIds: string[], contextInstance?: ShopwareApiInstance): Promise<{
    apiAlias: string;
    success: boolean;
}>;

type DocumentDownloadParams = {
    documentId: string;
    deepLinkCode: string;
};
/**
 * Download selected document
 *
 * @param {DocumentDownloadParams} params documentId and deepLinkCode
 *
 * @throws ClientApiError
 * @public
 */
declare function getDocumentDownload(params: DocumentDownloadParams, contextInstance?: ShopwareApiInstance): Promise<Blob>;

type GetUserCountryParams = {
    orderId: string;
    downloadId: string;
};
/**
 * Get order downloads (file)
 *
 * @param {GetUserCountryParams} data orderId and downloadId
 * @param {ShopwareApiInstance} contextInstance  instance of the api client (by default it's an Axios instance)
 *
 * @throws ClientApiError
 * @public
 */
declare function getOrderDownloads(data: GetUserCountryParams, contextInstance?: ShopwareApiInstance): Promise<Blob>;

/**
 * Get sitemap
 *
 * @throws ClientApiError
 * @public
 */
declare function getSitemap(contextInstance?: ShopwareApiInstance): Promise<SitemapResult[]>;

type NewsletterConfirmationParams = {
    em: string;
    hash: string;
};
/**
 * Confirmation from newsletter
 *
 * @param {NewsletterConfirmationParams} params
 * @param {ShopwareApiInstance} contextInstance
 * @returns
 */
declare function newsletterConfirmation(params: NewsletterConfirmationParams, contextInstance?: ShopwareApiInstance): Promise<void>;

/**
 * @nolink
 * @category Endpoints
 * @public
 */
declare const getCategoryEndpoint: () => string;
/**
 * @nolink
 * @category Endpoints
 * @public
 */
declare const getCategoryDetailsEndpoint: (categoryId: string) => string;
/**
 * @nolink
 * @category Endpoints
 * @public
 */
declare const getLandingPageDetailsEndpoint: (landingPageId: string) => string;
/**
 * @nolink
 * @category Endpoints
 * @public
 */
declare const getProductListingEndpoint: (categoryId: string) => string;
/**
 * @nolink
 * @category Endpoints
 * @public
 */
declare const getProductEndpoint: () => string;
/**
 * @nolink
 * @category Endpoints
 * @public
 */
declare const getProductDetailsEndpoint: (productId: string) => string;
/**
 * @nolink
 * @category Endpoints
 * @public
 */
declare const getProductReviewsEndpoint: (productId: string) => string;
/**
 * @nolink
 * @category Endpoints
 * @public
 */
declare const getSuggestSearchEndpoint: () => string;
/**
 * @nolink
 * @category Endpoints
 * @public
 */
declare const getSearchEndpoint: () => string;
/**
 * @nolink
 * @category Endpoints
 * @public
 */
declare const getCustomerAddAddressEndpoint: () => string;
/**
 * @nolink
 * @category Endpoints
 * @public
 */
declare const getCustomerAddressEndpoint: (addressId?: string) => string;
/**
 * @nolink
 * @category Endpoints
 * @public
 */
declare const getCustomerDefaultBillingAddressEndpoint: (addressId: string) => string;
/**
 * @nolink
 * @category Endpoints
 * @public
 */
declare const getCustomerDefaultShippingAddressEndpoint: (addressId: string) => string;
/**
 * @nolink
 * @category Endpoints
 * @public
 */
declare const getCustomerEndpoint: () => string;
/**
 * @nolink
 * @category Endpoints
 * @public
 */
declare const getCustomerRegisterEndpoint: () => string;
/**
 * @nolink
 * @category Endpoints
 * @public
 */
declare const getCustomerDetailsUpdateEndpoint: () => string;
/**
 * @nolink
 * @category Endpoints
 * @public
 */
declare const getCustomerLoginEndpoint: () => string;
/**
 * @nolink
 * @category Endpoints
 * @public
 */
declare const getCustomerLogoutEndpoint: () => string;
/**
 * @nolink
 * @category Endpoints
 * @public
 */
declare const getCustomerOrderEndpoint: () => string;
/**
 * @nolink
 * @category Endpoints
 * @public
 */
declare const getCustomerUpdateEmailEndpoint: () => string;
/**
 * @nolink
 * @category Endpoints
 * @public
 */
declare const getCustomerUpdatePasswordEndpoint: () => string;
/**
 * @nolink
 * @category Endpoints
 * @public
 */
declare const getCustomerResetPasswordEndpoint: () => string;
/**
 * @nolink
 * @category Endpoints
 * @public
 */
declare const getConfirmPasswordResetEndpoint: () => string;
/**
 * @nolink
 * @category Endpoints
 * @public
 */
declare const getCustomerAccountConfirmEndpoint: () => string;
/**
 * @nolink
 * @category Endpoints
 * @public
 */
declare const getCustomerUpdatePaymentMethodEndpoint: (paymentMethodId: string) => string;
/**
 * @nolink
 * @category Endpoints
 * @public
 */
declare const getCheckoutCartEndpoint: () => string;
/**
 * @nolink
 * @category Endpoints
 * @public
 */
declare const getCheckoutCartLineItemEndpoint: () => string;
/**
 * @nolink
 * @category Endpoints
 * @public
 */
declare const getCheckoutOrderEndpoint: () => string;
/**
 * @nolink
 * @category Endpoints
 * @public
 */
declare const getCancelOrderEndpoint: () => string;
/**
 * @nolink
 * @category Endpoints
 * @public
 */
declare const getChangeOrderPaymentMethodEndpoint: () => string;
/**
 * @nolink
 * @category Endpoints
 * @public
 */
declare const getContextEndpoint: () => string;
/**
 * @nolink
 * @category Endpoints
 * @public
 */
declare const getContextCurrencyEndpoint: () => string;
/**
 * @nolink
 * @category Endpoints
 * @public
 */
declare const getContextLanguageEndpoint: () => string;
/**
 * @nolink
 * @category Endpoints
 * @public
 */
declare const getContextCountryEndpoint: () => string;
/**
 * @nolink
 * @category Endpoints
 * @public
 */
declare const getContextPaymentMethodEndpoint: () => string;
/**
 * @nolink
 * @category Endpoints
 * @public
 */
declare const getContextShippingMethodEndpoint: () => string;
/**
 * @nolink
 * @category Endpoints
 * @public
 */
declare const getContextSalutationEndpoint: () => string;
/**
 * @nolink
 * @category Endpoints
 * @public
 */
declare const getNewsletterSubscribeEndpoint: () => string;
/**
 * @nolink
 * @category Endpoints
 * @public
 */
declare const getNewsletterUnsubscribeEndpoint: () => string;
/**
 * @nolink
 * @category Endpoints
 * @public
 */
declare const getNewsletterRecipientEndpoint: () => string;
/**
 * @nolink
 * @category Endpoints
 * @public
 */
declare const getPageResolverEndpoint: () => string;
/**
 * @nolink
 * @category Endpoints
 * @public
 */
declare const getSeoUrlEndpoint: () => string;
/**
 * @nolink
 * @category Endpoints
 * @public
 */
declare const getStoreNavigationEndpoint: (requestActiveId: string, requestRootId: string) => string;
/**
 * @nolink
 * @category Endpoints
 * @public
 */
declare const getContactFormEndpoint: () => string;
/**
 * @nolink
 * @category Endpoints
 * @public
 */
declare const handlePaymentEndpoint: () => string;
/**
 * @nolink
 * @category Endpoints
 * @public
 */
declare const getStoreNewsletterSubscribeEndpoint: () => string;
/**
 * @nolink
 * @category Endpoints
 * @public
 */
declare const getStoreNewsletterConfirmEndpoint: () => string;
/**
 * @nolink
 * @category Endpoints
 * @public
 */
declare const getStoreNewsletterUnsubscribeEndpoint: () => string;
/**
 * @nolink
 * @category Endpoints
 * @public
 */
declare const getGetWishlistProductsEndpoint: () => string;
/**
 * @nolink
 * @category Endpoints
 * @public
 */
declare const getAddWishlistProductEndpoint: (productId: string) => string;
/**
 * @nolink
 * @category Endpoints
 * @public
 */
declare const getRemoveWishlistProductEndpoint: (productId: string) => string;
/**
 * @nolink
 * @category Endpoints
 * @public
 */
declare const getMergeWishlistProductsEndpoint: () => string;
/**
 * @nolink
 * @nolink
 * @category Endpoints
 * @public
 */
declare const getDocumentDownloadEndpoint: (documentId: string, deepLinkCode: string) => string;
/**
 * @nolink
 * @category Endpoints
 * @public
 */
declare const getOrderDownloadsEndpoint: (orderId: string, downloadId: string) => string;
/**
 * @public
 */
declare const getSitemapEndpoint: () => string;

/**
 * @public
 */
declare const config: ClientSettings;
/**
 * Setup configuration. Merge default values with provided in param.
 * This method will override existing config. For config update invoke **update** method.
 * @public
 */
declare const setup: (config?: ClientSettings) => void;
/**
 * Update current configuration. This will change only provided values.
 * @public
 */
declare const update: (config?: ClientSettings) => void;
/**
 * @public
 */
declare const onConfigChange: (fn: (context: ConfigChangedArgs) => void) => void;

export { ClientSettings, ConfigChangedArgs, ContactFormData, CustomerRegisterResponse, CustomerResetPasswordParam, CustomerUpdateEmailParam, CustomerUpdatePasswordParam, CustomerUpdateProfileParam, GetStoreNavigationParams, NewsletterSubscribeData, ShopwareApiInstance, addCartItems, addProductReview, addProductToCart, addPromotionCode, addWishlistProduct, cancelOrder, changeCartItemQuantity, changeOrderPaymentMethod, clearCart, config, confirmAccountRegistration, confirmPasswordReset, createCustomerAddress, createInstance, createOrder, deleteCustomerAddress, getAddWishlistProductEndpoint, getAvailableCountries, getAvailableCurrencies, getAvailableLanguages, getAvailablePaymentMethods, getAvailableSalutations, getAvailableShippingMethods, getCancelOrderEndpoint, getCart, getCategories, getCategory, getCategoryDetailsEndpoint, getCategoryEndpoint, getCategoryProducts, getChangeOrderPaymentMethodEndpoint, getCheckoutCartEndpoint, getCheckoutCartLineItemEndpoint, getCheckoutOrderEndpoint, getCmsPage, getConfirmPasswordResetEndpoint, getContactFormEndpoint, getContextCountryEndpoint, getContextCurrencyEndpoint, getContextEndpoint, getContextLanguageEndpoint, getContextPaymentMethodEndpoint, getContextSalutationEndpoint, getContextShippingMethodEndpoint, getCustomer, getCustomerAccountConfirmEndpoint, getCustomerAddAddressEndpoint, getCustomerAddress, getCustomerAddressEndpoint, getCustomerAddresses, getCustomerDefaultBillingAddressEndpoint, getCustomerDefaultShippingAddressEndpoint, getCustomerDetailsUpdateEndpoint, getCustomerEndpoint, getCustomerLoginEndpoint, getCustomerLogoutEndpoint, getCustomerOrderEndpoint, getCustomerOrders, getCustomerRegisterEndpoint, getCustomerResetPasswordEndpoint, getCustomerUpdateEmailEndpoint, getCustomerUpdatePasswordEndpoint, getCustomerUpdatePaymentMethodEndpoint, getDocumentDownload, getDocumentDownloadEndpoint, getGetWishlistProductsEndpoint, getLandingPage, getLandingPageDetailsEndpoint, getMergeWishlistProductsEndpoint, getNewsletterRecipientEndpoint, getNewsletterSubscribeEndpoint, getNewsletterUnsubscribeEndpoint, getOrderDetails, getOrderDownloads, getOrderDownloadsEndpoint, getPageResolverEndpoint, getPaymentMethodDetails, getProduct, getProductDetailsEndpoint, getProductEndpoint, getProductListingEndpoint, getProductReviews, getProductReviewsEndpoint, getProductVariantForOptions, getProducts, getRemoveWishlistProductEndpoint, getSearchEndpoint, getSeoUrl, getSeoUrlEndpoint, getSeoUrls, getSessionContext, getShippingMethodDetails, getSitemap, getSitemapEndpoint, getStoreNavigation, getStoreNavigationEndpoint, getStoreNewsletterConfirmEndpoint, getStoreNewsletterSubscribeEndpoint, getStoreNewsletterUnsubscribeEndpoint, getSuggestSearchEndpoint, getUserCountry, getUserSalutation, getWishlistProducts, handlePayment, handlePaymentEndpoint, invokeGet, invokePost, isNewsletterSubscriber, login, logout, mergeWishlistProducts, newsletterConfirmation, newsletterSubscribe, newsletterUnsubscribe, onConfigChange, register, removeCartItem, removeWishlistProduct, resetPassword, searchProducts, searchSuggestedProducts, sendContactForm, setCurrentBillingAddress, setCurrentCurrency, setCurrentLanguage, setCurrentPaymentMethod, setCurrentShippingAddress, setCurrentShippingMethod, setDefaultCustomerBillingAddress, setDefaultCustomerPaymentMethod, setDefaultCustomerShippingAddress, setup, update, updateCustomerAddress, updateEmail, updatePassword, updateProfile };
