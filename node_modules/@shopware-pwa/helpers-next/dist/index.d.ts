import { Product, LineItem, OrderLineItem, Category, CmsBlock, CmsSection, CmsSlot, CmsPageResponse, LandingPage, SearchCriteria, Aggregations, ListingFilter, Media } from '@shopware-pwa/types';

/**
 * Get product free shipping property
 *
 * @param {Product} product product entity
 *
 * @public
 *
 * @category Product
 */
declare function getProductFreeShipping(product?: Product): boolean;

/**
 * gets the cover image
 *
 * @param {Product | LineItem | OrderLineItem} object Object containing media object
 *
 * @public
 *
 * @category Product
 */
declare function getMainImageUrl(object: Product | LineItem | OrderLineItem): string;

/**
 * @beta
 *
 * @param {Product} product product entity
 *
 * @category Product
 */
declare function getProductName({ product }?: {
    product?: Product;
}): string | null;

/**
 * @public
 */
type UiMediaGalleryItemUrl = {
    url: string;
};
/**
 * @public
 */
type UiMediaGalleryItem = {
    icon: UiMediaGalleryItemUrl;
    mobile: UiMediaGalleryItemUrl;
    desktop: UiMediaGalleryItemUrl;
};
/**
 * @public
 */
type UiProductOption = {
    label: string;
    value: string;
    code: string;
    color: string | null;
};
/**
 * @public
 */
type UiProductProperty = {
    name: string;
    value: string | null;
};
/**
 * @public
 */
type UiProductReview = {
    id: string;
    author: string;
    date: string;
    message: string | null;
    rating: number | null;
};

/**
 * Format product reviews to ui-interfaces
 *
 * @param {Product} product product entity
 *
 * @public
 *
 * @category Product
 */
declare function getProductReviews({ product, }?: {
    product?: Product;
}): UiProductReview[];

/**
 * @beta
 */
type TierPrice = {
    label: string;
    quantity: number;
    unitPrice: number;
};
/**
 * Get the prices depending on quantity added to cart.
 * Tier prices can be set in `Advanced pricing` tab in `Product view` (admin panel)
 *
 * @param {Product} product product entity
 *
 * @returns TierPrice[]
 * @beta
 */
declare function getProductTierPrices(product?: Product): TierPrice[];

/**
 * Get product url. The priority is SEO url and then technical url.
 *
 * @param {Product} product product entity
 *
 * @public
 *
 * @category Product
 */
declare function getProductUrl(product: Product | null): string;

/**
 * Get product rating average property
 *
 * @param {Product} product product entity
 *
 * @public
 *
 * @category Product
 */
declare function getProductRatingAverage(product: Product): number | null;

/**
 * get the thumbnail image URL with the smallest width
 *
 * @deprecated use `getSmallestThumbnailUrl` helper instead
 *
 * @param {Product} product product entity
 *
 * @beta
 *
 * @category Product
 */
declare function getProductThumbnailUrl(product: Product): string;

/**
 * Get the calculated list price
 *
 * @returns (number|undefined)
 *
 * @beta
 */
declare function getProductCalculatedListingPrice(product?: Product): number | undefined;

/**
 * @beta
 *
 * @param {Product} product product entity
 *
 * @category Product
 */
declare function getProductFromPrice(product: Product): number | undefined;

type LinkedCategory = Pick<Category, "type" | "externalLink" | "seoUrls" | "internalLink" | "id" | "linkType">;
/**
 * Get URL for category.
 * Some link {@link isLinkCategory}
 *
 * @param {Category} category category entity
 *
 * @public
 */
declare function getCategoryUrl(category: LinkedCategory): string;

/**
 * gets the cover image
 *
 * @param {Category} category category entity
 *
 * @public
 */
declare function getCategoryImageUrl(category: Partial<Category>): string;

/**
 * Gather breadcrumbs from category
 *
 * @param {Category} category category entity
 */
declare function getCategoryBreadcrumbs(category: Category | null | undefined, options?: {
    /**
     * Start at specific index if your navigation
     * contains root names which should not be visible.
     */
    startIndex?: number;
}): {
    name: string;
}[];

/**
 * @beta
 */
type LayoutConfiguration = {
    layoutStyles: {
        backgroundColor: string | null;
        backgroundImage: string | null;
        backgroundSize?: string | null;
        sizingMode?: string | null;
        marginBottom?: string | null | undefined;
        marginLeft?: string | null | undefined;
        marginRight?: string | null | undefined;
        marginTop?: string | null | undefined;
    };
    cssClasses: string | null;
};
/**
 * Get layout configuration for CMS content
 *
 * @param {CmsBlock | CmsSection | CmsSlot} content CMS content
 *
 * @category CMS (Shopping Experiences)
 */
declare function getCmsLayoutConfiguration(content: CmsBlock | CmsSection | CmsSlot): LayoutConfiguration;

/**
 * Returns the main page object depending of the type of the CMS page.
 *
 * @category CMS (Shopping Experiences)
 */
declare function getCmsEntityObject(response: CmsPageResponse): Product | Category | LandingPage;
/**
 * Predicate function to check if the entity is a product.
 *
 * @category CMS (Shopping Experiences)
 */
declare function isProduct<T extends {
    apiAlias: string;
}>(entity: T | Product): entity is Product;
declare function isCategory<T extends {
    apiAlias: string;
}>(entity: T | Category): entity is Category;
declare function isLandingPage<T extends {
    apiAlias: string;
}>(entity: T | LandingPage): entity is LandingPage;

/**
 * @internal
 */
declare function _parseUrlQuery(query: any): SearchCriteria;

/**
 * Debouce helper to invoke a method with a delay
 *
 * @deprecated - use useDebounceFn from @vueuse/core instead
 */
declare function _debounce<T extends (...args: any[]) => any>(fn: T, delay?: number): T;

/**
 * Get translated property from the given object.
 *
 * @param {T} element object with translated property
 *
 * @public
 */
declare function getTranslatedProperty<T>(element: T | undefined | null | never, property: keyof T): string;

/**
 * @beta
 */
declare function getListingFilters(aggregations: Aggregations | undefined | null): ListingFilter[];

type Options = {
    direction?: "ltr" | "rtl";
    removeDecimals?: boolean;
    removeCurrency?: boolean;
};
/**
 * Get formatted price
 *
 * @param value price value
 * @param currency currency symbol
 * @param options formatting options (direction, removeDecimals, removeCurrency)
 *
 * @public
 */
declare function getFormattedPrice(value: string | number, currency: string, options?: Options): string;

/**
 * Returns the smallest thumbnail url from the media object
 *
 * @param media image object
 *
 * @public
 * @category Media
 */
declare function getSmallestThumbnailUrl(media: Media | undefined | null): string | undefined;
/**
 * Returns the biggest thumbnail url from the media object
 *
 * @param media image object
 *
 * @public
 * @category Media
 */
declare function getBiggestThumbnailUrl(media: Media): string | undefined;
/**
 * Returns the srcset attribute for the image, for available breakpoints
 *
 * @param media image object
 *
 * @public
 * @category Media
 */
declare function getSrcSetForMedia(media: Media): string;

type ProductMedia = {
    id: string;
    fileName: string;
};
/**
 * Prepare media object
 *
 * @param {OrderLineItem} lineItem order item
 *
 * @public
 * @category Media
 */
declare function getMedia(lineItem: OrderLineItem): ProductMedia[];

/**
 * Download file
 *
 * @param {Blob} file
 * @param {string} name
 */
declare function downloadFile(file: Blob, name: string): void;

export { LayoutConfiguration, TierPrice, UiMediaGalleryItem, UiMediaGalleryItemUrl, UiProductOption, UiProductProperty, UiProductReview, _debounce, _parseUrlQuery, downloadFile, getBiggestThumbnailUrl, getCategoryBreadcrumbs, getCategoryImageUrl, getCategoryUrl, getCmsEntityObject, getCmsLayoutConfiguration, getFormattedPrice, getListingFilters, getMainImageUrl, getMedia, getProductCalculatedListingPrice, getProductFreeShipping, getProductFromPrice, getProductName, getProductRatingAverage, getProductReviews, getProductThumbnailUrl, getProductTierPrices, getProductUrl, getSmallestThumbnailUrl, getSrcSetForMedia, getTranslatedProperty, isCategory, isLandingPage, isProduct };
