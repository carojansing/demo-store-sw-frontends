{
  "version": 3,
  "sources": ["../../../../scule/dist/index.mjs"],
  "sourcesContent": ["const NUMBER_CHAR_RE = /\\d/;\nconst STR_SPLITTERS = [\"-\", \"_\", \"/\", \".\"];\nfunction isUppercase(char = \"\") {\n  if (NUMBER_CHAR_RE.test(char)) {\n    return void 0;\n  }\n  return char.toUpperCase() === char;\n}\nfunction splitByCase(string_, separators) {\n  const splitters = separators ?? STR_SPLITTERS;\n  const parts = [];\n  if (!string_ || typeof string_ !== \"string\") {\n    return parts;\n  }\n  let buff = \"\";\n  let previousUpper;\n  let previousSplitter;\n  for (const char of string_) {\n    const isSplitter = splitters.includes(char);\n    if (isSplitter === true) {\n      parts.push(buff);\n      buff = \"\";\n      previousUpper = void 0;\n      continue;\n    }\n    const isUpper = isUppercase(char);\n    if (previousSplitter === false) {\n      if (previousUpper === false && isUpper === true) {\n        parts.push(buff);\n        buff = char;\n        previousUpper = isUpper;\n        continue;\n      }\n      if (previousUpper === true && isUpper === false && buff.length > 1) {\n        const lastChar = buff[buff.length - 1];\n        parts.push(buff.slice(0, Math.max(0, buff.length - 1)));\n        buff = lastChar + char;\n        previousUpper = isUpper;\n        continue;\n      }\n    }\n    buff += char;\n    previousUpper = isUpper;\n    previousSplitter = isSplitter;\n  }\n  parts.push(buff);\n  return parts;\n}\nfunction upperFirst(string_) {\n  return !string_ ? \"\" : string_[0].toUpperCase() + string_.slice(1);\n}\nfunction lowerFirst(string_) {\n  return !string_ ? \"\" : string_[0].toLowerCase() + string_.slice(1);\n}\nfunction pascalCase(string_) {\n  return !string_ ? \"\" : (Array.isArray(string_) ? string_ : splitByCase(string_)).map((p) => upperFirst(p)).join(\"\");\n}\nfunction camelCase(string_) {\n  return lowerFirst(pascalCase(string_));\n}\nfunction kebabCase(string_, joiner) {\n  return !string_ ? \"\" : (Array.isArray(string_) ? string_ : splitByCase(string_)).map((p) => p.toLowerCase()).join(joiner ?? \"-\");\n}\nfunction snakeCase(string_) {\n  return kebabCase(string_, \"_\");\n}\n\nexport { camelCase, isUppercase, kebabCase, lowerFirst, pascalCase, snakeCase, splitByCase, upperFirst };\n"],
  "mappings": ";AAAA,IAAM,iBAAiB;AACvB,IAAM,gBAAgB,CAAC,KAAK,KAAK,KAAK,GAAG;AACzC,SAAS,YAAY,OAAO,IAAI;AAC9B,MAAI,eAAe,KAAK,IAAI,GAAG;AAC7B,WAAO;AAAA,EACT;AACA,SAAO,KAAK,YAAY,MAAM;AAChC;AACA,SAAS,YAAY,SAAS,YAAY;AACxC,QAAM,YAAY,cAAc;AAChC,QAAM,QAAQ,CAAC;AACf,MAAI,CAAC,WAAW,OAAO,YAAY,UAAU;AAC3C,WAAO;AAAA,EACT;AACA,MAAI,OAAO;AACX,MAAI;AACJ,MAAI;AACJ,aAAW,QAAQ,SAAS;AAC1B,UAAM,aAAa,UAAU,SAAS,IAAI;AAC1C,QAAI,eAAe,MAAM;AACvB,YAAM,KAAK,IAAI;AACf,aAAO;AACP,sBAAgB;AAChB;AAAA,IACF;AACA,UAAM,UAAU,YAAY,IAAI;AAChC,QAAI,qBAAqB,OAAO;AAC9B,UAAI,kBAAkB,SAAS,YAAY,MAAM;AAC/C,cAAM,KAAK,IAAI;AACf,eAAO;AACP,wBAAgB;AAChB;AAAA,MACF;AACA,UAAI,kBAAkB,QAAQ,YAAY,SAAS,KAAK,SAAS,GAAG;AAClE,cAAM,WAAW,KAAK,KAAK,SAAS,CAAC;AACrC,cAAM,KAAK,KAAK,MAAM,GAAG,KAAK,IAAI,GAAG,KAAK,SAAS,CAAC,CAAC,CAAC;AACtD,eAAO,WAAW;AAClB,wBAAgB;AAChB;AAAA,MACF;AAAA,IACF;AACA,YAAQ;AACR,oBAAgB;AAChB,uBAAmB;AAAA,EACrB;AACA,QAAM,KAAK,IAAI;AACf,SAAO;AACT;AACA,SAAS,WAAW,SAAS;AAC3B,SAAO,CAAC,UAAU,KAAK,QAAQ,CAAC,EAAE,YAAY,IAAI,QAAQ,MAAM,CAAC;AACnE;AACA,SAAS,WAAW,SAAS;AAC3B,SAAO,CAAC,UAAU,KAAK,QAAQ,CAAC,EAAE,YAAY,IAAI,QAAQ,MAAM,CAAC;AACnE;AACA,SAAS,WAAW,SAAS;AAC3B,SAAO,CAAC,UAAU,MAAM,MAAM,QAAQ,OAAO,IAAI,UAAU,YAAY,OAAO,GAAG,IAAI,CAAC,MAAM,WAAW,CAAC,CAAC,EAAE,KAAK,EAAE;AACpH;AACA,SAAS,UAAU,SAAS;AAC1B,SAAO,WAAW,WAAW,OAAO,CAAC;AACvC;AACA,SAAS,UAAU,SAAS,QAAQ;AAClC,SAAO,CAAC,UAAU,MAAM,MAAM,QAAQ,OAAO,IAAI,UAAU,YAAY,OAAO,GAAG,IAAI,CAAC,MAAM,EAAE,YAAY,CAAC,EAAE,KAAK,UAAU,GAAG;AACjI;AACA,SAAS,UAAU,SAAS;AAC1B,SAAO,UAAU,SAAS,GAAG;AAC/B;",
  "names": []
}
