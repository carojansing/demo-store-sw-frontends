// node_modules/@shopware-pwa/helpers-next/dist/index.mjs
function getProductFreeShipping(product) {
  return (product == null ? void 0 : product.shippingFree) || false;
}
function isProduct$1(object) {
  return (object == null ? void 0 : object.apiAlias) === "product";
}
function getMainImageUrl(object) {
  var _a, _b, _c, _d, _e;
  if (isProduct$1(object)) {
    return ((_b = (_a = object == null ? void 0 : object.cover) == null ? void 0 : _a.media) == null ? void 0 : _b.url) || ((_d = (_c = object == null ? void 0 : object.media) == null ? void 0 : _c[0]) == null ? void 0 : _d.media.url) || "";
  }
  return ((_e = object == null ? void 0 : object.cover) == null ? void 0 : _e.url) || "";
}
function getTranslatedProperty(element, property) {
  var _a;
  return ((_a = element == null ? void 0 : element.translated) == null ? void 0 : _a[property]) || (element == null ? void 0 : element[property]) || "";
}
function getProductName({ product } = {}) {
  if (!product) {
    return null;
  }
  return getTranslatedProperty(product, "name");
}
function getProductReviews({
  product
} = {}) {
  if (!product || !product.productReviews) {
    return [];
  }
  return product.productReviews.map(
    ({ id, externalUser, customerId, createdAt, content, points }) => ({
      id,
      author: externalUser ? externalUser : customerId,
      date: createdAt,
      message: content,
      rating: points
    })
  );
}
function getProductTierPrices(product) {
  var _a;
  if (!product || !((_a = product.calculatedPrices) == null ? void 0 : _a.length)) {
    return [];
  }
  const size = product.calculatedPrices.length;
  return product.calculatedPrices.map(({ unitPrice, quantity }, index) => ({
    label: index === size - 1 ? `from ${quantity}` : `to ${quantity}`,
    quantity,
    unitPrice
  }));
}
function getProductUrl(product) {
  var _a, _b;
  if (!product)
    return "/";
  const seoUrl = (_b = (_a = product.seoUrls) == null ? void 0 : _a[0]) == null ? void 0 : _b.seoPathInfo;
  return seoUrl ? `/${seoUrl}` : `/detail/${product.id}`;
}
function getProductRatingAverage(product) {
  return product == null ? void 0 : product.ratingAverage;
}
function getProductThumbnailUrl(product) {
  var _a, _b, _c, _d, _e;
  const coverImageUrlFallback = ((_b = (_a = product == null ? void 0 : product.cover) == null ? void 0 : _a.media) == null ? void 0 : _b.url) || "";
  const thumbnailImage = ((_e = (_d = (_c = product == null ? void 0 : product.cover) == null ? void 0 : _c.media) == null ? void 0 : _d.thumbnails) == null ? void 0 : _e.length) && product.cover.media.thumbnails.reduce(function(res, thumb) {
    return thumb.width < res.width ? thumb : res;
  }) || null;
  return (thumbnailImage == null ? void 0 : thumbnailImage.url) || coverImageUrlFallback;
}
function getProductCalculatedListingPrice(product) {
  var _a, _b, _c;
  return ((_b = (_a = product == null ? void 0 : product.calculatedPrice) == null ? void 0 : _a.listPrice) == null ? void 0 : _b.price) || ((_c = product == null ? void 0 : product.calculatedPrice) == null ? void 0 : _c.unitPrice);
}
function getProductRealPrice(product) {
  var _a;
  if (!product) {
    return;
  }
  const real = product.calculatedPrice;
  if (((_a = product.calculatedPrices) == null ? void 0 : _a.length) > 1) {
    return product.calculatedPrices[product.calculatedPrices.length - 1];
  }
  return real;
}
function getProductFromPrice(product) {
  var _a;
  if (!product) {
    return;
  }
  const realPrice = getProductRealPrice(product);
  const displayFromPriceLabel = ((_a = product.calculatedPrices) == null ? void 0 : _a.length) > 0;
  if (displayFromPriceLabel)
    return realPrice == null ? void 0 : realPrice.unitPrice;
}
function getEntityPrefix(category) {
  switch (category.linkType) {
    case "category":
      return "navigation";
    case "product":
      return "detail";
    case "landing_page":
      return "landingPage";
  }
}
function getCategoryUrl(category) {
  var _a, _b, _c, _d;
  if (!category)
    return "/";
  switch (category.type) {
    case void 0:
      return "/";
    case "link":
      return category.externalLink || ((_b = (_a = category == null ? void 0 : category.seoUrls) == null ? void 0 : _a[0]) == null ? void 0 : _b.seoPathInfo) || `/${getEntityPrefix(category)}/${category.internalLink}`;
    default:
      return ((_d = (_c = category.seoUrls) == null ? void 0 : _c[0]) == null ? void 0 : _d.seoPathInfo) ? `/${category.seoUrls[0].seoPathInfo}` : `/${getEntityPrefix(category)}/${category.id}`;
  }
}
var isCategory$1 = (category) => {
  return (category == null ? void 0 : category.type) === "page" || (category == null ? void 0 : category.type) === "link" || (category == null ? void 0 : category.type) === "folder";
};
function getCategoryImageUrl(category) {
  var _a;
  return isCategory$1(category) ? ((_a = category == null ? void 0 : category.media) == null ? void 0 : _a.url) || "" : "";
}
function getCategoryBreadcrumbs(category, options) {
  var _a;
  const breadcrumbs = ((_a = category == null ? void 0 : category.translated) == null ? void 0 : _a.breadcrumb) || (category == null ? void 0 : category.breadcrumb) || [];
  const startIndex = (options == null ? void 0 : options.startIndex) || 0;
  if (breadcrumbs.length <= startIndex)
    return [];
  return breadcrumbs.slice(startIndex).map((element) => {
    return {
      name: element
    };
  });
}
function isCmsSlot(content) {
  return content.apiAlias === "cms_slot";
}
function isCmsBlock(content) {
  return content.apiAlias === "cms_block";
}
function isCmsSection(content) {
  return content.apiAlias === "cms_section";
}
var deviceMap = {
  mobile: "md",
  tablet: "lg",
  desktop: "xl"
};
function getVisibilityClasses(content) {
  var _a;
  if (isCmsSlot(content) || !(content == null ? void 0 : content.visibility) || Object.keys(content == null ? void 0 : content.visibility).length === 0)
    return {};
  const visibilityCssClasses = {};
  (_a = Object.entries(content == null ? void 0 : content.visibility)) == null ? void 0 : _a.forEach(([device, isVisible]) => {
    if (!isVisible) {
      visibilityCssClasses[`${deviceMap[device]}:hidden`] = true;
    }
  });
  return visibilityCssClasses;
}
function getCmsLayoutConfiguration(content) {
  if (!content || isCmsSlot(content)) {
    return {
      cssClasses: null,
      layoutStyles: {}
    };
  }
  const visibilityCssClasses = getVisibilityClasses(content);
  const cssClasses = Object.keys(visibilityCssClasses).length ? Object.assign({}, content.cssClass, visibilityCssClasses) : content.cssClass;
  return {
    cssClasses,
    layoutStyles: {
      backgroundColor: content.backgroundColor,
      backgroundImage: content.backgroundMedia ? `url("${content.backgroundMedia.url}")` : null,
      backgroundSize: isCmsSection(content) ? content.backgroundMediaMode : null,
      sizingMode: isCmsSection(content) ? content.sizingMode : null,
      marginBottom: isCmsBlock(content) ? content.marginBottom : null,
      marginLeft: isCmsBlock(content) ? content.marginLeft : null,
      marginRight: isCmsBlock(content) ? content.marginRight : null,
      marginTop: isCmsBlock(content) ? content.marginTop : null
    }
  };
}
function getCmsEntityObject(response) {
  switch (response.resourceType) {
    case "frontend.detail.page":
      return response.product;
    case "frontend.navigation.page":
      return response.category;
    case "frontend.landing.page":
      return response.landingPage;
  }
}
function isProduct(entity) {
  return entity.apiAlias === "product";
}
function isCategory(entity) {
  return entity.apiAlias === "category";
}
function isLandingPage(entity) {
  return entity.apiAlias === "landing_page";
}
function _parseUrlQuery(query) {
  const searchCriteria = {};
  if (!query || typeof query !== "object") {
    return searchCriteria;
  }
  Object.keys(query).forEach((key) => {
    try {
      searchCriteria[key] = typeof query[key] === "string" && ["{", "["].includes(query[key].charAt(0)) ? JSON.parse(query[key]) : query[key];
    } catch (e) {
      console.error(
        "[helpers][parseUrlQuery] Problem with resolving url param: " + key
      );
    }
  });
  return searchCriteria;
}
function _debounce(fn, delay = 300) {
  let prevTimer = null;
  return (...args) => {
    if (prevTimer) {
      clearTimeout(prevTimer);
    }
    prevTimer = window.setTimeout(() => {
      fn(...args);
      prevTimer = null;
    }, delay);
  };
}
var getFilter = (code, aggregation) => {
  return {
    label: getTranslatedProperty(aggregation, "name") || code,
    code,
    ...aggregation
  };
};
function isEntitiesAggregation(aggregation) {
  return aggregation.entities !== void 0;
}
function getListingFilters(aggregations) {
  if (!aggregations) {
    return [];
  }
  const transformedFilters = [];
  for (const [aggregationName, aggregation] of Object.entries(aggregations)) {
    if (aggregationName === "properties" && isEntitiesAggregation(aggregation)) {
      for (const filterEntity of aggregation.entities) {
        transformedFilters.push(getFilter(aggregationName, filterEntity));
      }
    } else if (!["properties", "options"].includes(aggregationName)) {
      transformedFilters.push(getFilter(aggregationName, aggregation));
    }
  }
  return transformedFilters;
}
var toFixedValue = 2;
var decimalsRegExp = new RegExp(`[.,]0{${toFixedValue}}$`);
function removeDecimals(value) {
  return value.replace(decimalsRegExp, "");
}
function getFormattedPrice(value, currency, options = {
  direction: "ltr",
  removeDecimals: false,
  removeCurrency: false
}) {
  let formattedPrice = [(+value).toFixed(toFixedValue), currency];
  if (options.removeDecimals) {
    formattedPrice[0] = removeDecimals(formattedPrice[0]);
  }
  if (options.removeCurrency) {
    formattedPrice.pop();
  }
  if (options.direction === "rtl" && !options.removeCurrency) {
    formattedPrice = formattedPrice.reverse();
  }
  return formattedPrice.join(" ");
}
function getSmallestThumbnailUrl(media) {
  var _a;
  if (!media || !((_a = media == null ? void 0 : media.thumbnails) == null ? void 0 : _a.length)) {
    return;
  }
  const lowest = media.thumbnails.reduce((previous, current) => {
    return current.width < previous.width ? current : previous;
  });
  return lowest == null ? void 0 : lowest.url;
}
function getBiggestThumbnailUrl(media) {
  var _a;
  if (!((_a = media == null ? void 0 : media.thumbnails) == null ? void 0 : _a.length)) {
    return;
  }
  const biggest = media.thumbnails.reduce((previous, current) => {
    return current.width > previous.width ? current : previous;
  });
  return biggest == null ? void 0 : biggest.url;
}
function getSrcSetForMedia(media) {
  var _a;
  if (!((_a = media == null ? void 0 : media.thumbnails) == null ? void 0 : _a.length)) {
    return "";
  }
  return media.thumbnails.map((thumbnail) => {
    return `${thumbnail.url} ${thumbnail.width}w`;
  }).join(", ");
}
function getMedia(lineItem) {
  var _a;
  return ((_a = lineItem.downloads) == null ? void 0 : _a.reduce((acc, current) => {
    acc.push({
      id: current.id,
      fileName: `${current.media.fileName}.${current.media.fileExtension}`
    });
    return acc;
  }, [])) || [];
}
function downloadFile(file, name) {
  const media = document.createElement("a");
  media.href = URL.createObjectURL(file);
  media.download = name;
  document.body.appendChild(media);
  media.click();
  document.body.removeChild(media);
}

export {
  getProductFreeShipping,
  getMainImageUrl,
  getTranslatedProperty,
  getProductName,
  getProductReviews,
  getProductTierPrices,
  getProductUrl,
  getProductRatingAverage,
  getProductThumbnailUrl,
  getProductCalculatedListingPrice,
  getProductFromPrice,
  getCategoryUrl,
  getCategoryImageUrl,
  getCategoryBreadcrumbs,
  getCmsLayoutConfiguration,
  getCmsEntityObject,
  isProduct,
  isCategory,
  isLandingPage,
  _parseUrlQuery,
  _debounce,
  getListingFilters,
  getFormattedPrice,
  getSmallestThumbnailUrl,
  getBiggestThumbnailUrl,
  getSrcSetForMedia,
  getMedia,
  downloadFile
};
//# sourceMappingURL=chunk-NRQQV2U4.js.map
